{
  "version": "1.2.0",
  "config": {
    "$schema": "./node_modules/oxlint/configuration_schema.json",
    "plugins": [
      "unicorn",
      "typescript",
      "oxc"
    ],
    "categories": {},
    "rules": {
      "no-console": "error",
      "for-direction": "warn",
      "no-async-promise-executor": "warn",
      "no-caller": "warn",
      "no-class-assign": "warn",
      "no-compare-neg-zero": "warn",
      "no-cond-assign": "warn",
      "no-const-assign": "warn",
      "no-constant-binary-expression": "warn",
      "no-constant-condition": "warn",
      "no-control-regex": "warn",
      "no-debugger": "error",
      "no-delete-var": "warn",
      "no-dupe-class-members": "warn",
      "no-dupe-else-if": "warn",
      "no-dupe-keys": "warn",
      "no-duplicate-case": "warn",
      "no-empty-character-class": "warn",
      "no-empty-pattern": "warn",
      "no-empty-static-block": "warn",
      "no-eval": "warn",
      "no-ex-assign": "warn",
      "no-extra-boolean-cast": "warn",
      "no-func-assign": "warn",
      "no-global-assign": "warn",
      "no-import-assign": "warn",
      "no-invalid-regexp": "warn",
      "no-irregular-whitespace": "warn",
      "no-loss-of-precision": "warn",
      "no-new-native-nonconstructor": "warn",
      "no-nonoctal-decimal-escape": "warn",
      "no-obj-calls": "warn",
      "no-self-assign": "warn",
      "no-setter-return": "warn",
      "no-shadow-restricted-names": "warn",
      "no-sparse-arrays": "warn",
      "no-this-before-super": "warn",
      "no-unsafe-finally": "warn",
      "no-unsafe-negation": "warn",
      "no-unsafe-optional-chaining": "warn",
      "no-unused-labels": "warn",
      "no-unused-private-class-members": "warn",
      "no-unused-vars": "warn",
      "no-useless-backreference": "warn",
      "no-useless-catch": "warn",
      "no-useless-escape": "warn",
      "no-useless-rename": "warn",
      "no-with": "warn",
      "require-yield": "warn",
      "use-isnan": "warn",
      "valid-typeof": "warn",
      "oxc/bad-array-method-on-arguments": "warn",
      "oxc/bad-char-at-comparison": "warn",
      "oxc/bad-comparison-sequence": "warn",
      "oxc/bad-min-max-func": "warn",
      "oxc/bad-object-literal-comparison": "warn",
      "oxc/bad-replace-all-arg": "warn",
      "oxc/const-comparisons": "warn",
      "oxc/double-comparisons": "warn",
      "oxc/erasing-op": "warn",
      "oxc/missing-throw": "warn",
      "oxc/number-arg-out-of-range": "warn",
      "oxc/only-used-in-recursion": "warn",
      "oxc/uninvoked-array-callback": "warn",
      "typescript/no-duplicate-enum-values": "warn",
      "typescript/no-extra-non-null-assertion": "warn",
      "typescript/no-misused-new": "warn",
      "typescript/no-non-null-asserted-optional-chain": "warn",
      "typescript/no-this-alias": "warn",
      "typescript/no-unnecessary-parameter-property-assignment": "warn",
      "typescript/no-unsafe-declaration-merging": "warn",
      "typescript/no-useless-empty-export": "warn",
      "typescript/no-wrapper-object-types": "warn",
      "typescript/prefer-as-const": "warn",
      "typescript/triple-slash-reference": "warn",
      "unicorn/no-await-in-promise-methods": "warn",
      "unicorn/no-empty-file": "warn",
      "unicorn/no-invalid-fetch-options": "warn",
      "unicorn/no-invalid-remove-event-listener": "warn",
      "unicorn/no-new-array": "warn",
      "unicorn/no-single-promise-in-promise-methods": "warn",
      "unicorn/no-thenable": "warn",
      "unicorn/no-unnecessary-await": "warn",
      "unicorn/no-useless-fallback-in-spread": "warn",
      "unicorn/no-useless-length-check": "warn",
      "unicorn/no-useless-spread": "warn",
      "unicorn/prefer-set-size": "warn",
      "unicorn/prefer-string-starts-ends-with": "warn",
      "curly": "error"
    },
    "settings": {
      "jsx-a11y": {
        "polymorphicPropName": null,
        "components": {}
      },
      "next": {
        "rootDir": []
      },
      "react": {
        "formComponents": [],
        "linkComponents": []
      },
      "jsdoc": {
        "ignorePrivate": false,
        "ignoreInternal": false,
        "ignoreReplacesDocs": true,
        "overrideReplacesDocs": true,
        "augmentsExtendsReplacesDocs": false,
        "implementsReplacesDocs": false,
        "exemptDestructuredRootsFromChecks": false,
        "tagNamePreference": {}
      }
    },
    "env": {
      "builtin": true
    },
    "globals": {},
    "ignorePatterns": []
  },
  "timestamp": 1750659031462,
  "files": [
    {
      "filename": "packages/oxlint-fi/src/utils.ts",
      "source": "import { execSync } from 'node:child_process'\nimport { readFile } from 'node:fs/promises'\nimport { dirname } from 'node:path'\nimport { cwd, exit } from 'node:process'\nimport { fileURLToPath } from 'node:url'\nimport { resolve } from 'pathe'\n\nexport async function getOxlintVersion() {\n  try {\n    const version = execSync('npx oxlint --version', { encoding: 'utf-8' })\n    return version.split(' ')[1].replaceAll('\\n', '')\n  }\n  catch {\n    console.error('Oxlint is not installed, please install it first')\n    exit(1)\n  }\n}\n\nexport async function getOxlintConfig() {\n  // 读取当前目录下的 .oxlintrc.json 文件\n  const configPath = resolve(cwd(), '.oxlintrc.json')\n  try {\n    const config = await readFile(configPath, 'utf-8')\n\n    return config\n  }\n  catch {\n    return null\n  }\n}\n\nfunction wrapOxlintCommand(rawArgs: string[], buildMode?: boolean) {\n  const args = buildMode ? rawArgs.slice(1) : rawArgs\n  const commandArgs = ['npx', 'oxlint', '-f', 'json', ...args]\n  return commandArgs.join(' ')\n}\n\nexport function execOxlintCommand(rawArgs: string[], buildMode?: boolean) {\n  try {\n    const oxlintCommand = wrapOxlintCommand(rawArgs, buildMode)\n    const output = execSync(oxlintCommand, { encoding: 'utf-8', stdio: ['pipe', 'pipe', 'pipe'] })\n    return output\n  }\n  catch (error) {\n    if (error instanceof Error && 'stdout' in error) {\n      return error.stdout as string\n    }\n    throw error\n  }\n}\n\nexport const clientDir = resolve(dirname(fileURLToPath(import.meta.url)), './client/public')\n\n// 按 filename 分组的函数\nexport async function groupByFilename(oxlintOutput: string) {\n  try {\n    const data = JSON.parse(oxlintOutput)\n    const diagnostics = data.diagnostics || []\n\n    // 按 filename 分组\n    const grouped = diagnostics.reduce((acc: Record<string, any>, diagnostic: any) => {\n      const filename = diagnostic.filename\n      if (!acc[filename]) {\n        acc[filename] = {\n          filename,\n          lines: {},\n        }\n      }\n\n      // 按 line 分组\n      const line = diagnostic.labels?.[0]?.span?.line || 1\n      if (!acc[filename].lines[line]) {\n        acc[filename].lines[line] = []\n      }\n      acc[filename].lines[line].push(diagnostic)\n\n      return acc\n    }, {})\n\n    // 转换为数组格式，并将 lines 对象转换为数组，同时读取文件内容\n    const result = await Promise.all(\n      Object.values(grouped).map(async (file: any) => {\n        let source = ''\n        try {\n          source = await readFile(file.filename, 'utf-8')\n        }\n        catch (error) {\n          console.warn(`无法读取文件 ${file.filename}:`, error)\n          source = ''\n        }\n\n        return {\n          filename: file.filename,\n          source,\n          lines: Object.entries(file.lines).map(([line, messages]: [string, any]) => ({\n            line: Number.parseInt(line),\n            messages,\n          })).sort((a, b) => a.line - b.line), // 按行号排序\n        }\n      }),\n    )\n\n    return {\n      files: result,\n      summary: {\n        number_of_files: data.number_of_files,\n        number_of_rules: data.number_of_rules,\n        threads_count: data.threads_count,\n        start_time: data.start_time,\n        files_with_issues: result.length,\n        error_count: diagnostics.filter((d: any) => d.severity === 'error').length,\n        warning_count: diagnostics.filter((d: any) => d.severity === 'warning').length,\n      },\n    }\n  }\n  catch (error) {\n    console.error('解析 oxlint 输出失败:', error)\n    return { files: [], summary: {} }\n  }\n}\n",
      "lines": [
        {
          "line": 14,
          "messages": [
            {
              "message": "Unexpected console statement.",
              "code": "eslint(no-console)",
              "severity": "error",
              "causes": [],
              "url": "https://oxc.rs/docs/guide/usage/linter/rules/eslint/no-console.html",
              "help": "Delete this console statement.",
              "filename": "packages/oxlint-fi/src/utils.ts",
              "labels": [
                {
                  "span": {
                    "offset": 440,
                    "length": 13,
                    "line": 14,
                    "column": 5
                  }
                }
              ],
              "related": []
            }
          ]
        },
        {
          "line": 88,
          "messages": [
            {
              "message": "Unexpected console statement.",
              "code": "eslint(no-console)",
              "severity": "error",
              "causes": [],
              "url": "https://oxc.rs/docs/guide/usage/linter/rules/eslint/no-console.html",
              "help": "Delete this console statement.",
              "filename": "packages/oxlint-fi/src/utils.ts",
              "labels": [
                {
                  "span": {
                    "offset": 2554,
                    "length": 12,
                    "line": 88,
                    "column": 11
                  }
                }
              ],
              "related": []
            }
          ]
        },
        {
          "line": 117,
          "messages": [
            {
              "message": "Unexpected console statement.",
              "code": "eslint(no-console)",
              "severity": "error",
              "causes": [],
              "url": "https://oxc.rs/docs/guide/usage/linter/rules/eslint/no-console.html",
              "help": "Delete this console statement.",
              "filename": "packages/oxlint-fi/src/utils.ts",
              "labels": [
                {
                  "span": {
                    "offset": 3441,
                    "length": 13,
                    "line": 117,
                    "column": 5
                  }
                }
              ],
              "related": []
            }
          ]
        }
      ]
    },
    {
      "filename": "packages/client/app/components/LineError.vue",
      "source": "<script setup lang=\"ts\">\nimport type { Label, LineData } from '~~/types'\nimport { calculateErrorHeight, getFileExt, processLabelHtml } from '~/composables/useFileUtils'\n\ninterface Props {\n  lineData: LineData\n  filename: string\n  source: string\n}\n\nconst props = defineProps<Props>()\n\n// 计算当前行的代码\nconst currentLineCode = computed(() => {\n  const lines = props.source.split('\\n')\n  return lines[props.lineData.line - 1] || ''\n})\n\n// 获取文件扩展名\nconst fileExt = computed(() => getFileExt(props.filename))\n\n// 计算错误标记高度\nconst errorHeight = computed(() => calculateErrorHeight(props.lineData.messages))\n\n// 获取排序后的标签\nconst sortedLabels = computed(() => {\n  return props.lineData.messages\n    .flatMap(m => m.labels || [])\n    .sort((a, b) => a.span.column - b.span.column)\n})\n\n// 获取标签对应的消息\nfunction getMessageForLabel(column: number) {\n  for (const message of props.lineData.messages) {\n    if (message.labels) {\n      for (const label of message.labels) {\n        if (label.span.column === column) {\n          return message\n        }\n      }\n    }\n  }\n  return null\n}\n\n// 计算标签的垂直位置样式\nfunction getLabelVerticalStyle(labelIndex: number, baseLeft = 0) {\n  const label = sortedLabels.value[labelIndex]\n  if (!label)\n    return { left: '0ch' }\n\n  return {\n    left: `calc(${Math.floor((label.span.length - 1) / 2) + baseLeft}ch)`,\n  }\n}\n\n// 生成标签指示器\nfunction generateLabelIndicator(label: Label) {\n  const preDashes = Math.floor((label.span.length - 1) / 2)\n  const postDashes = Math.ceil((label.span.length - 1) / 2)\n\n  return {\n    preDashes: Array.from({ length: preDashes }, (_, i) => i),\n    postDashes: Array.from({ length: postDashes }, (_, i) => i),\n  }\n}\n\nfunction severityClass(severity: string | undefined) {\n  if (severity === 'error')\n    return 'text-red-300 group-hover:text-red-600 dark:text-red-800 dark:group-hover:text-red-500'\n\n  return 'text-yellow-400 group-hover:text-yellow-600 dark:text-yellow-800 dark:group-hover:text-yellow-300'\n}\n</script>\n\n<template>\n  <div class=\"overflow-auto\">\n    <div class=\"p-4\">\n      <!-- 当前行代码 -->\n      <div class=\"flex gap-4 items-start\">\n        <span class=\"text-neutral-500 font-mono text-sm relative top-[3px]\">{{ lineData.line }}</span>\n        <div class=\"flex-1\">\n          <Shiki :code=\"currentLineCode\" :ext=\"fileExt\" />\n\n          <div class=\"flex relative\" :style=\"{ minHeight: `${errorHeight}px`, top: '-10px' }\">\n            <a v-for=\"(label, labelIndex) in sortedLabels\" :key=\"labelIndex\" target=\"_blank\"\n              :href=\"getMessageForLabel(label.span.column)?.url\"\n              class=\"absolute whitespace-pre text-neutral-300 dark:text-neutral-600 hover:text-neutral-800 dark:hover:text-neutral-200 cursor-pointer group\"\n              :style=\"{ left: `calc(${label.span.column - 1}ch)` }\">\n              <UTooltip :delay-duration=\"100\" :content=\"{ side: 'top' }\" :disable-hoverable-content=\"false\"\n                :ui=\"{ content: 'py-4 px-5 h-auto max-w-sm' }\">\n                <template #content>\n                  <ErrorTooltip v-if=\"getMessageForLabel(label.span.column)\"\n                    :message=\"getMessageForLabel(label.span.column)!\" :filename=\"filename\" :line=\"lineData.line\"\n                    :column=\"label.span.column\" />\n                </template>\n                <div>\n                  <div>\n                    <span v-for=\"i in generateLabelIndicator(label).preDashes\" :key=\"`pre-${i}`\">─</span>\n                    <span>┬</span>\n                    <span v-for=\"i in generateLabelIndicator(label).postDashes\" :key=\"`post-${i}`\">─</span>\n                  </div>\n                  <div v-for=\"i in (sortedLabels.length - labelIndex - 1) * 2\" :key=\"`bar-${i}`\" class=\"relative\"\n                    :style=\"getLabelVerticalStyle(labelIndex, -1)\">\n                    │\n                  </div>\n                  <div class=\"relative flex\" :style=\"getLabelVerticalStyle(labelIndex)\">\n                    <div>╰─</div>\n                    <div class=\"ml-1\" v-if=\"(label as any).label\"\n                      v-html=\"processLabelHtml((label as any).label) + '.'\" />\n                    <div class=\"ml-1\" :class=\"severityClass(getMessageForLabel(label.span.column)?.severity)\">\n                      {{ getMessageForLabel(label.span.column)?.code }}\n                    </div>\n                  </div>\n                </div>\n              </UTooltip>\n            </a>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n",
      "lines": [
        {
          "line": 50,
          "messages": [
            {
              "message": "Expected { after 'if' condition.",
              "code": "eslint(curly)",
              "severity": "error",
              "causes": [],
              "url": "https://oxc.rs/docs/guide/usage/linter/rules/eslint/curly.html",
              "help": "Replace `return { left: '0ch' }` with `{return { left: '0ch' }}`.",
              "filename": "packages/client/app/components/LineError.vue",
              "labels": [
                {
                  "span": {
                    "offset": 1309,
                    "length": 22,
                    "line": 50,
                    "column": 5
                  }
                }
              ],
              "related": []
            }
          ]
        },
        {
          "line": 70,
          "messages": [
            {
              "message": "Expected { after 'if' condition.",
              "code": "eslint(curly)",
              "severity": "error",
              "causes": [],
              "url": "https://oxc.rs/docs/guide/usage/linter/rules/eslint/curly.html",
              "help": "Replace `return 'text-red-300 group-hover:text-red-600 dark:text-red-800 dark:group-hover:text-red-500'` with `{return 'text-red-300 group-hover:text-red-600 dark:text-red-800 dark:group-hover:text-red-500'}`.",
              "filename": "packages/client/app/components/LineError.vue",
              "labels": [
                {
                  "span": {
                    "offset": 1853,
                    "length": 94,
                    "line": 70,
                    "column": 5
                  }
                }
              ],
              "related": []
            }
          ]
        }
      ]
    },
    {
      "filename": "packages/client/app/app.vue",
      "source": "<script setup lang=\"ts\">\nimport type { PayloadData } from '~~/types'\nimport { useDebounceFn, useLocalStorage } from '@vueuse/core'\nimport { isMatch } from 'picomatch'\n\nconst { data, pending } = await useFetch<PayloadData>('/api/payload.json', {})\n\n// 计算问题总数\nconst totalIssues = computed(() => {\n  if (!data.value?.files)\n    return 0\n  return data.value.files.reduce((sum, file) =>\n    sum + file.lines.reduce((s, line) => s + line.messages.length, 0), 0)\n})\n\n// 判断是否显示摘要\nconst showSummary = computed(() => !!data.value?.summary)\n\nconst search = ref('')\n\n// 防抖的搜索值\nconst debouncedSearch = ref('')\n\n// 使用 VueUse 的 useDebounceFn 创建防抖函数\nconst debouncedUpdateSearch = useDebounceFn((value: string) => {\n  debouncedSearch.value = value\n}, 300)\n\n// 监听搜索值变化\nwatch(search, (newValue) => {\n  debouncedUpdateSearch(newValue)\n}, { immediate: true })\n\n\nconst filteredFiles = computed(() => {\n  if (!data.value?.files)\n    return []\n\n  const searchTerm = debouncedSearch.value.trim()\n\n  // 如果搜索词为空，返回所有文件\n  if (!searchTerm) {\n    return data.value.files\n  }\n\n  // 尝试使用 picomatch 进行 glob 匹配\n  try {\n    return data.value.files.filter(file => isMatch(file.filename, searchTerm, { contains: true }))\n  } catch (error) {\n    // 如果 glob 模式无效，回退到简单的字符串包含匹配\n    return data.value.files.filter(file => file.filename.includes(searchTerm))\n  }\n})\n\n// 判断是否显示文件列表\nconst showFiles = computed(() => !!filteredFiles.value && filteredFiles.value.length > 0)\n\n\n// 判断是否显示空状态\nconst showEmpty = computed(() => filteredFiles.value && (!filteredFiles.value.length || filteredFiles.value.length === 0))\n\n\n// 计算布局类名\nconst layoutClass = computed(() => {\n  if (layout.value === 'single') {\n    return 'grid-cols-1'\n  }\n  return 'grid-cols-1 lg:grid-cols-2'\n})\n\nconst layout = useLocalStorage<'single' | 'double'>('layout', 'double')\n</script>\n\n<template>\n  <UApp>\n    <div class=\"container mx-auto p-4\">\n\n      <AppHeader />\n\n      <main>\n\n        <!-- 摘要信息 -->\n        <SummaryCard v-if=\"showSummary && data?.summary\" :summary=\"data.summary\" :total-issues=\"totalIssues\"\n          :version=\"data.version\" :config=\"data.config\" :timestamp=\"data.timestamp\" />\n\n        <!-- 搜索和布局控制区域 -->\n        <div class=\"flex flex-col sm:flex-row gap-3 mb-3 items-start sm:items-center\">\n          <Search v-model=\"search\" class=\"flex-1\" />\n          <LayoutToggle v-model=\"layout\" />\n        </div>\n\n        <!-- 文件列表 -->\n        <div v-if=\"showFiles\" :class=\"['grid gap-4', layoutClass]\">\n          <FileCard v-for=\"file in filteredFiles\" :key=\"file.filename\" :file=\"file\" />\n        </div>\n\n        <!-- 加载状态 -->\n        <LoadingState v-else-if=\"pending\" />\n\n        <!-- 空状态 -->\n        <EmptyState v-else-if=\"showEmpty\" />\n      </main>\n    </div>\n\n  </UApp>\n</template>\n",
      "lines": [
        {
          "line": 11,
          "messages": [
            {
              "message": "Expected { after 'if' condition.",
              "code": "eslint(curly)",
              "severity": "error",
              "causes": [],
              "url": "https://oxc.rs/docs/guide/usage/linter/rules/eslint/curly.html",
              "help": "Replace `return 0` with `{return 0}`.",
              "filename": "packages/client/app/app.vue",
              "labels": [
                {
                  "span": {
                    "offset": 337,
                    "length": 8,
                    "line": 11,
                    "column": 5
                  }
                }
              ],
              "related": []
            }
          ]
        },
        {
          "line": 37,
          "messages": [
            {
              "message": "Expected { after 'if' condition.",
              "code": "eslint(curly)",
              "severity": "error",
              "causes": [],
              "url": "https://oxc.rs/docs/guide/usage/linter/rules/eslint/curly.html",
              "help": "Replace `return []` with `{return []}`.",
              "filename": "packages/client/app/app.vue",
              "labels": [
                {
                  "span": {
                    "offset": 982,
                    "length": 9,
                    "line": 37,
                    "column": 5
                  }
                }
              ],
              "related": []
            }
          ]
        }
      ]
    },
    {
      "filename": "tests/fixtures/foo.vue",
      "source": "<script setup lang=\"ts\">\nconst a = 1\nconst b = 2\nconst c = 3\n\nconst d = a + b + c\n\nconst e = 1\n\nconsole.log('a')\n\n</script>\n\n<template>\n  <div v-for=\"i in 10\">\n  {{ i }}\n  </div>\n</template>\n",
      "lines": [
        {
          "line": 10,
          "messages": [
            {
              "message": "Unexpected console statement.",
              "code": "eslint(no-console)",
              "severity": "error",
              "causes": [],
              "url": "https://oxc.rs/docs/guide/usage/linter/rules/eslint/no-console.html",
              "help": "Delete this console statement.",
              "filename": "tests/fixtures/foo.vue",
              "labels": [
                {
                  "span": {
                    "offset": 96,
                    "length": 11,
                    "line": 10,
                    "column": 1
                  }
                }
              ],
              "related": []
            }
          ]
        }
      ]
    },
    {
      "filename": "packages/client/app/composables/useFileUtils.ts",
      "source": "// 获取文件扩展名\nexport function getFileExt(filename: string) {\n  const ext = filename.split('.').pop()\n  return ext ? `.${ext}` : ''\n}\n\n// 获取文件图标\nexport function getFileIcon(filename: string) {\n  const ext = getFileExt(filename)\n  switch (ext) {\n    case '.ts':\n    case '.tsx':\n      return 'vscode-icons:file-type-typescript'\n    case '.js':\n    case '.jsx':\n      return 'vscode-icons:file-type-js'\n    case '.vue':\n      return 'vscode-icons:file-type-vue'\n    case '.css':\n      return 'vscode-icons:file-type-css'\n    case '.json':\n      return 'vscode-icons:file-type-json'\n    case '.md':\n      return 'vscode-icons:file-type-markdown'\n    default:\n      return 'vscode-icons:file-type-text'\n  }\n}\n\n// 计算错误标记的高度\nexport function calculateErrorHeight(messages: any[]) {\n  if (!messages || messages.length === 0)\n    return 0\n\n  // 计算所有 labels 的最大数量\n  const maxLabels = Math.max(...messages.map(msg => msg.labels?.length || 0))\n\n  // 每个 label 大约需要 2 行的高度（一行给指示器，一行给消息）\n  // 每行约 20px 高度，加上一些间距\n  return maxLabels > 0 ? maxLabels * 3 * 20 + 15 : 0\n}\n\n// 跳转到编辑器\nexport function openInEditor(filename: string, line: number, column: number) {\n  // 尝试使用 vscode:// 协议打开\n  const vscodeUrl = `vscode://file/${encodeURIComponent(filename)}:${line}:${column}`\n  window.open(vscodeUrl, '_blank')\n}\n\n// 处理 v-html 输入，将单引号中间的内容替换为带背景色\nexport function processLabelHtml(text: string) {\n  if (!text)\n    return ''\n\n  // 匹配单引号和反引号中间的内容，并替换为带背景色的 span\n  return text.replace(/['`]([^'`]+)['`]/g, '<span class=\"bg-neutral-100 dark:bg-neutral-800 px-1 py-0.5 rounded font-semibold\">$1</span>')\n}\n",
      "lines": [
        {
          "line": 33,
          "messages": [
            {
              "message": "Expected { after 'if' condition.",
              "code": "eslint(curly)",
              "severity": "error",
              "causes": [],
              "url": "https://oxc.rs/docs/guide/usage/linter/rules/eslint/curly.html",
              "help": "Replace `return 0` with `{return 0}`.",
              "filename": "packages/client/app/composables/useFileUtils.ts",
              "labels": [
                {
                  "span": {
                    "offset": 861,
                    "length": 8,
                    "line": 33,
                    "column": 5
                  }
                }
              ],
              "related": []
            }
          ]
        },
        {
          "line": 53,
          "messages": [
            {
              "message": "Expected { after 'if' condition.",
              "code": "eslint(curly)",
              "severity": "error",
              "causes": [],
              "url": "https://oxc.rs/docs/guide/usage/linter/rules/eslint/curly.html",
              "help": "Replace `return ''` with `{return ''}`.",
              "filename": "packages/client/app/composables/useFileUtils.ts",
              "labels": [
                {
                  "span": {
                    "offset": 1590,
                    "length": 9,
                    "line": 53,
                    "column": 5
                  }
                }
              ],
              "related": []
            }
          ]
        }
      ]
    },
    {
      "filename": "tests/fixtures/foo.ts",
      "source": "const a = 1\nconst b = 2\nconst c = 3\n\nconst d = a + b + c\n\nconst e = 1\n\nconsole.log('a')\n",
      "lines": [
        {
          "line": 5,
          "messages": [
            {
              "message": "Variable 'd' is declared but never used. Unused variables should start with a '_'.",
              "code": "eslint(no-unused-vars)",
              "severity": "warning",
              "causes": [],
              "url": "https://oxc.rs/docs/guide/usage/linter/rules/eslint/no-unused-vars.html",
              "help": "Consider removing this declaration.",
              "filename": "tests/fixtures/foo.ts",
              "labels": [
                {
                  "label": "'d' is declared here",
                  "span": {
                    "offset": 43,
                    "length": 1,
                    "line": 5,
                    "column": 7
                  }
                }
              ],
              "related": []
            }
          ]
        },
        {
          "line": 7,
          "messages": [
            {
              "message": "Variable 'e' is declared but never used. Unused variables should start with a '_'.",
              "code": "eslint(no-unused-vars)",
              "severity": "warning",
              "causes": [],
              "url": "https://oxc.rs/docs/guide/usage/linter/rules/eslint/no-unused-vars.html",
              "help": "Consider removing this declaration.",
              "filename": "tests/fixtures/foo.ts",
              "labels": [
                {
                  "label": "'e' is declared here",
                  "span": {
                    "offset": 64,
                    "length": 1,
                    "line": 7,
                    "column": 7
                  }
                }
              ],
              "related": []
            }
          ]
        },
        {
          "line": 9,
          "messages": [
            {
              "message": "Unexpected console statement.",
              "code": "eslint(no-console)",
              "severity": "error",
              "causes": [],
              "url": "https://oxc.rs/docs/guide/usage/linter/rules/eslint/no-console.html",
              "help": "Delete this console statement.",
              "filename": "tests/fixtures/foo.ts",
              "labels": [
                {
                  "span": {
                    "offset": 71,
                    "length": 11,
                    "line": 9,
                    "column": 1
                  }
                }
              ],
              "related": []
            }
          ]
        }
      ]
    },
    {
      "filename": "tests/fixtures/bar.ts",
      "source": "function bar() { console.log('xxx'); }\n\n\nfunction foo() { console.log('xxx') }\n\nconsole.log('xxxx');\n\n\ndebugger\n",
      "lines": [
        {
          "line": 1,
          "messages": [
            {
              "message": "Unexpected console statement.",
              "code": "eslint(no-console)",
              "severity": "error",
              "causes": [],
              "url": "https://oxc.rs/docs/guide/usage/linter/rules/eslint/no-console.html",
              "help": "Delete this console statement.",
              "filename": "tests/fixtures/bar.ts",
              "labels": [
                {
                  "span": {
                    "offset": 17,
                    "length": 11,
                    "line": 1,
                    "column": 18
                  }
                }
              ],
              "related": []
            },
            {
              "message": "Function 'bar' is declared but never used.",
              "code": "eslint(no-unused-vars)",
              "severity": "warning",
              "causes": [],
              "url": "https://oxc.rs/docs/guide/usage/linter/rules/eslint/no-unused-vars.html",
              "help": "Consider removing this declaration.",
              "filename": "tests/fixtures/bar.ts",
              "labels": [
                {
                  "label": "'bar' is declared here",
                  "span": {
                    "offset": 9,
                    "length": 3,
                    "line": 1,
                    "column": 10
                  }
                }
              ],
              "related": []
            }
          ]
        },
        {
          "line": 4,
          "messages": [
            {
              "message": "Unexpected console statement.",
              "code": "eslint(no-console)",
              "severity": "error",
              "causes": [],
              "url": "https://oxc.rs/docs/guide/usage/linter/rules/eslint/no-console.html",
              "help": "Delete this console statement.",
              "filename": "tests/fixtures/bar.ts",
              "labels": [
                {
                  "span": {
                    "offset": 58,
                    "length": 11,
                    "line": 4,
                    "column": 18
                  }
                }
              ],
              "related": []
            },
            {
              "message": "Function 'foo' is declared but never used.",
              "code": "eslint(no-unused-vars)",
              "severity": "warning",
              "causes": [],
              "url": "https://oxc.rs/docs/guide/usage/linter/rules/eslint/no-unused-vars.html",
              "help": "Consider removing this declaration.",
              "filename": "tests/fixtures/bar.ts",
              "labels": [
                {
                  "label": "'foo' is declared here",
                  "span": {
                    "offset": 50,
                    "length": 3,
                    "line": 4,
                    "column": 10
                  }
                }
              ],
              "related": []
            }
          ]
        },
        {
          "line": 6,
          "messages": [
            {
              "message": "Unexpected console statement.",
              "code": "eslint(no-console)",
              "severity": "error",
              "causes": [],
              "url": "https://oxc.rs/docs/guide/usage/linter/rules/eslint/no-console.html",
              "help": "Delete this console statement.",
              "filename": "tests/fixtures/bar.ts",
              "labels": [
                {
                  "span": {
                    "offset": 80,
                    "length": 11,
                    "line": 6,
                    "column": 1
                  }
                }
              ],
              "related": []
            }
          ]
        },
        {
          "line": 9,
          "messages": [
            {
              "message": "`debugger` statement is not allowed",
              "code": "eslint(no-debugger)",
              "severity": "error",
              "causes": [],
              "url": "https://oxc.rs/docs/guide/usage/linter/rules/eslint/no-debugger.html",
              "help": "Remove the debugger statement",
              "filename": "tests/fixtures/bar.ts",
              "labels": [
                {
                  "span": {
                    "offset": 103,
                    "length": 8,
                    "line": 9,
                    "column": 1
                  }
                }
              ],
              "related": []
            }
          ]
        }
      ]
    },
    {
      "filename": "packages/oxlint-fi/src/index.ts",
      "source": "import { existsSync } from 'node:fs'\nimport { cp, mkdir, readFile, rm, stat, writeFile } from 'node:fs/promises'\nimport { argv, cwd } from 'node:process'\nimport c from 'ansis'\nimport consola from 'consola'\nimport { getPort } from 'get-port-please'\nimport { cli, define } from 'gunshi'\nimport { getQuery, H3, serve, serveStatic } from 'h3'\nimport launch from 'launch-editor'\nimport { lookup } from 'mrmime'\nimport open from 'open'\nimport { join, relative, resolve } from 'pathe'\nimport { version } from '../package.json'\nimport { clientDir, execOxlintCommand, getOxlintConfig, getOxlintVersion, groupByFilename } from './utils'\n\nconst mainCommand = define({\n  name: 'main',\n  run: async ({ _ }) => {\n    consola.info(`Using Oxlint Formatter Inspector v${version}`)\n    consola.start('Analyzing project...')\n    const oxLintVersion = await getOxlintVersion()\n    const config = await getOxlintConfig()\n    const rawOutput = execOxlintCommand(_, false)\n    const groupedOutput = await groupByFilename(rawOutput)\n    const app = new H3()\n\n    app.use('/api/payload.json', () => {\n      return {\n        version: oxLintVersion,\n        config: config ? JSON.parse(config) : null,\n        timestamp: Date.now(),\n        ...groupedOutput,\n      }\n    })\n\n    app.use('/api/launch', async (event) => {\n      try {\n        const query = getQuery(event)\n        if (query.file) {\n          const absolutePath = join(cwd(), query.file)\n          launch(absolutePath)\n          return {\n            status: 'success',\n          }\n        }\n      }\n      catch (error) {\n        return {\n          status: 'error',\n          error: String(error),\n        }\n      }\n    })\n\n    app.use('/**', (event) => {\n      return serveStatic(event, {\n        indexNames: ['/index.html'],\n        getContents: id => readFile(join(clientDir, id)),\n        getMeta: async (id) => {\n          const stats = await stat(join(clientDir, id)).catch(() => { })\n          if (stats?.isFile()) {\n            return {\n              size: stats.size,\n              mtime: stats.mtimeMs,\n              type: lookup(id),\n            }\n          }\n        },\n        fallthrough: true,\n      })\n    })\n\n    const port = await getPort({ port: 3778, portRange: [3778, 4000] })\n\n    serve(app, { port, silent: true })\n\n    consola.success(`Starting at`, c.green`http://localhost:${port}`, '\\n')\n    open(`http://localhost:${port}`)\n  },\n})\n\nconst buildCommand = define({\n  name: 'build',\n  run: async ({ _ }) => {\n    consola.info(`Using Oxlint Formatter Inspector v${version}`)\n    consola.start('Building project...')\n\n    const oxLintVersion = await getOxlintVersion()\n    const config = await getOxlintConfig()\n    const rawOutput = execOxlintCommand(_, true)\n    console.log({\n      rawOutput,\n    })\n    const groupedOutput = await groupByFilename(rawOutput)\n\n    const outputDir = resolve(cwd(), '.oxlint-formatter-inspector')\n    if (existsSync(outputDir)) {\n      await rm(outputDir, { recursive: true })\n    }\n    await mkdir(outputDir, { recursive: true })\n    await cp(clientDir, outputDir, { recursive: true })\n    await mkdir(resolve(outputDir, 'api'), { recursive: true })\n    await writeFile(resolve(outputDir, 'api', 'payload.json'), JSON.stringify({\n      version: oxLintVersion,\n      config: config ? JSON.parse(config) : null,\n      timestamp: Date.now(),\n      ...groupedOutput,\n    }, null, 2), 'utf-8')\n\n    consola.success(`Built to ${c.cyan(relative(cwd(), outputDir))}`)\n    consola.success(`You can preview this build using ${c.green`npx serve ${relative(cwd(), outputDir)}`}`)\n  },\n})\n\ncli(argv.slice(2), mainCommand, {\n  name: 'oxlint-formatter-inspector',\n  version,\n  renderHeader: () => Promise.resolve(''),\n  subCommands: new Map([\n    ['build', buildCommand],\n  ]),\n})\n",
      "lines": [
        {
          "line": 91,
          "messages": [
            {
              "message": "Unexpected console statement.",
              "code": "eslint(no-console)",
              "severity": "error",
              "causes": [],
              "url": "https://oxc.rs/docs/guide/usage/linter/rules/eslint/no-console.html",
              "help": "Delete this console statement.",
              "filename": "packages/oxlint-fi/src/index.ts",
              "labels": [
                {
                  "span": {
                    "offset": 2724,
                    "length": 11,
                    "line": 91,
                    "column": 5
                  }
                }
              ],
              "related": []
            }
          ]
        }
      ]
    }
  ],
  "summary": {
    "number_of_files": 27,
    "number_of_rules": null,
    "threads_count": 8,
    "start_time": 0.012442292,
    "files_with_issues": 8,
    "error_count": 16,
    "warning_count": 4
  }
}
